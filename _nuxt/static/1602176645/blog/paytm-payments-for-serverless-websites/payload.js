__NUXT_JSONP__("/blog/paytm-payments-for-serverless-websites", (function(a){return {data:[{title:"Paytm payments for serverless websites",author:"soulsam480",authorlink:"https:\u002F\u002Fgithub.com\u002Fsoulsam480",date:"2020-08-17T13:43:47.409Z",update:"2020-08-17T13:43:47.465Z",published:a,updated:a,type:"js",thumbnail:"\u002Fimages\u002Fuploads\u002Fgroup-1.png",summary:"Paytm payments integration for serverless JAMstack websites using Netlify lambda functions. This repo will save you from the nightmare of setting up a serverless payment integration from scratch.",slug:"paytm-payments-for-serverless-websites",html:"\u003Ch2\u003EPaytm-Netlify-Lambda üöÄ\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fpaytm.com\"\u003EPaytm\u003C\u002Fa\u003E payments integration for serverless JAMstack websites using \u003Ca href=\"https:\u002F\u002Fwww.netlify.com\u002Fproducts\u002Ffunctions\u002F\"\u003ENetlify lambda\u003C\u002Fa\u003E functions. This repo will save you from the nightmare of setting up a serverless payment integration from scratch.\u003C\u002Fp\u003E\n\u003Cp\u003EüöÄ It's live \u003Ca href=\"https:\u002F\u002Ftiaamo.com\"\u003Ehere\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Cp\u003Eüí• GitHub repo is \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fsoulsam480\u002Fpaytm-netlify-lambda\"\u003Ehere\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003Eüìë Table of Contents\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003Eüî∞ [Getting Started\u003C\u002Fli\u003E\n\u003Cli\u003Eüìê Setup\n\u003Cul\u003E\n\u003Cli\u003Eüå± Basic Setup\u003C\u002Fli\u003E\n\u003Cli\u003Eüî• Usage with Firebase\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Eüóú Integration\u003C\u002Fli\u003E\n\u003Cli\u003Eüìì Notes\n\u003Cul\u003E\n\u003Cli\u003Eü§ì How it Works ?\u003C\u002Fli\u003E\n\u003Cli\u003Eüåã Errors\u003C\u002Fli\u003E\n\u003Cli\u003Eüìî References\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003EGetting Started\u003C\u002Fh3\u003E\n\u003Cp\u003ETo get started clone this repo.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-shell\"\u003Egit clone git@github.com:soulsam480\u002Fpaytm-netlify-lambda.git\n\ncd paytm-netlify-lambda\n\nnpm install\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003ETo serve the lambda functions locally we can run\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-shell\"\u003Enpm run start\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EBut before that we have to setup the functions otherwise there will be errors!!\u003C\u002Fp\u003E\n\u003Ch3\u003ESetup\u003C\u002Fh3\u003E\n\u003Cp\u003EOpen the repo in your favorite text-editor and the file structure will be like this\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Econfig\u003C\u002Fli\u003E\n\u003Cli\u003Edist\u003C\u002Fli\u003E\n\u003Cli\u003Esrc\n\u003Cul\u003E\n\u003Cli\u003Ecred\u003C\u002Fli\u003E\n\u003Cli\u003Epaytm\n\u003Cul\u003E\n\u003Cli\u003Echecksum.js\u003C\u002Fli\u003E\n\u003Cli\u003Ecrypt.js\u003C\u002Fli\u003E\n\u003Cli\u003Epaytm_config.js\u003C\u002Fli\u003E\n\u003Cli\u003EpaytmChecksum.js\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EpayConf.js\u003C\u002Fli\u003E\n\u003Cli\u003Epayment.js\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003EWebpack cofig sits inside the config folder. All our functions will be build into the dist folder. So it's good if we don't touch that folder.\u003C\u002Fp\u003E\n\u003Ch4\u003EBasic Setup\u003C\u002Fh4\u003E\n\u003Cp\u003EOpen paytm_config.js inside the paytm folder.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003Emodule.exports = {\n  paytm_config: {\n    PAYTM_ENVIRONMENT: &quot;TEST&quot;, \u002F\u002Fpossible values:  TEST | PROD\n    MID: &quot; Your MID&quot;, \u002F\u002F Get it From https:\u002F\u002Fdashboard.paytm.com\u002Fnext\u002Fapikeys use Test id for test purpose and Production id for Production Purpose\n    WEBSITE: &quot;WEBSTAGING&quot;, \u002F\u002F USE WEBSTAGING for testing, You Will get it for Production here https:\u002F\u002Fdashboard.paytm.com\u002Fnext\u002Fapikeys\n    CHANNEL_ID: &quot;WEB&quot;, \u002F\u002F Use WEB for Desktop Website and WAP for Mobile Website\n    INDUSTRY_TYPE_ID: &quot;Retail&quot;, \u002F\u002F Use Retail for Testing, For Production You Can Get it from here https:\u002F\u002Fdashboard.paytm.com\u002Fnext\u002Fapikeys\n    MERCHANT_KEY: &quot; Your MERCHANT_KEY&quot;, \u002F\u002F Get it From https:\u002F\u002Fdashboard.paytm.com\u002Fnext\u002Fapikeys use Test key for test purpose and Production key for Production Purpose\n    CALLBACK_URL:\n      &quot;https:\u002F\u002Fyour_unique_site_id.netlify.app\u002F.netlify\u002Ffunctions\u002FpayConf&quot;, \u002F\u002F Modify and Use this url for verifying payment\n  },\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EChange the MID and Merchant Key to your paytm merchant account. The callback url will be updated after you have deployed these functions to netlify. So we will leave it as it is. Again if you wish to change the parameters for production build, the respective fields will be changed with the production credentials.\u003C\u002Fp\u003E\n\u003Cp\u003EIf you don't wish to use firebase for order validation and confirmation, you can stop here and remove firebase completely from the project. If you wish to use, let's move in to the next step.\u003C\u002Fp\u003E\n\u003Ch4\u003EUsage with Firebase\u003C\u002Fh4\u003E\n\u003Cp\u003EWe will use \u003Ca href=\"npmjs.com\u002Fpackage\u002Ffirebase-admin\"\u003Efirebase-admin\u003C\u002Fa\u003E sdk for nodejs to access admin privilages. With firebase admin running on server we can perform CRUD operations on realtime database easily.\u003C\u002Fp\u003E\n\u003Cp\u003ETo setup admin sdk you need a firebase service account. To get yourself one open you firebase admin dashboard and then project settings &gt; service accounts. Create one for your project and download the credentials in json. Then open src\u002Fcred\u002FauthKey.js . Add the credentials in their respective places.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003Emodule.exports = {\n  authKey: {\n    type: &quot;service_account&quot;,\n    project_id: &quot;Your Project id&quot;,\n    private_key_id: &quot; Your PRIVATE_KEY_ID&quot;,\n    private_key: &quot;Your PRIVATE_KEY&quot;,\n    client_email: &quot;Your client email&quot;,\n    client_id: &quot;Your client id&quot;,\n    auth_uri: &quot;your auth uri&quot;,\n    token_uri: &quot;auth token uri&quot;,\n    auth_provider_x509_cert_url: &quot;cert url provider&quot;,\n    client_x509_cert_url: &quot; your CERT_URL&quot;,\n  },\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EThen open src\u002FpayConf.js and add your database URL. With this the setup is complete.\u003C\u002Fp\u003E\n\u003Cp\u003EAfter each successful payment firebase-admin will create an order inside\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003EOrders\u002Fdd_mm_yy(current date)\u002ForderId\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Ethis could be further used to verify an proceed with the payment. This is the only advantage of using firebase inside this project. If you don't wish to verify your orders, you can drop firebase completely and move on with the basic approach.\u003C\u002Fp\u003E\n\u003Cp\u003EAs the setup is complete you can deploy this project to netlify by pushing the code into an it repo. The instruction on how to deploy from a git repo is \u003Ca href=\"https:\u002F\u002Fdocs.netlify.com\u002Fconfigure-builds\u002Fget-started\u002F#basic-build-settings\"\u003Ehere\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EThere are two methods to integrate these functions to your project.\u003C\u002Fp\u003E\n\u003Ch3\u003EIntegration\u003C\u002Fh3\u003E\n\u003Cp\u003EThis method makes a POST request to the api and creates and submits the form clent-side in browser.\nLet's move further for a good explanation.\u003C\u002Fp\u003E\n\u003Cp\u003ETo make API calls you have to pass these parameters inside the body of your post request. Here is an example using axios.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003Eaxios({\n        method: &quot;post&quot;,\n        url:\n          &quot;https:\u002F\u002Fyour_unique_netliy_appname.netlify.app\u002F.netlify\u002Ffunctions\u002Fpayment&quot;,\n        data: {\n          amount: payment amount, \u002F\u002Fmust be an integer Mandatory\n          name: &quot;customer_name&quot;, \u002F\u002F _ is allowed.no space allowed inbetween. ex. Sambit_sahoo\n          email: &quot;customer_email&quot;, \u002F\u002Fvalid customer email\n          orderid: &quot;Order_id&quot;, \u002F\u002Fmandatory.no space allowed inbetween ex. OD123231 or OD_12324\n          mobile: &quot;customer_mobileno&quot;,\n        },\n        headers: {\n          &quot;Content-Type&quot;: &quot;application\u002Fjson&quot;,\n        },\n      })\n        .then(async (res) =&gt; {\n          console.log(res);\n          const params = res.data.params;\n          params[&quot;CHECKSUMHASH&quot;] = res.data.checksum;\n          \n          \u002F\u002FHere the helper function post.js creates the from api response and submits.\n          \n          post({\n            action: res.data.action,\n            target: &quot;_self&quot;,\n            params: params,\n          });\n        })\n        .catch((err) =&gt; {\n          window.alert(err);\n        });\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EHere is the helper function which creates and submits the form client side inside browser.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\u002F\u002FThis plugin is used to perform form action request from jsvascript.\n\u002F\u002FThis is derived from https:\u002F\u002Fgithub.com\u002Fjisaacks\u002Freact-post\u002Fblob\u002Fmaster\u002Fsrc\u002Fpost.js\nfunction isDate(val) {\n  \u002F\u002F Cross realm comptatible\n  return Object.prototype.toString.call(val) === &quot;[object Date]&quot;;\n}\n\nfunction isObj(val) {\n  return typeof val === &quot;object&quot;;\n}\n\nexport function stringifyValue(val) {\n  if (isObj(val) &amp;&amp; !isDate(val)) {\n    return JSON.stringify(val);\n  } else {\n    return val;\n  }\n}\n\nfunction buildForm({ action, target, params }) {\n  const form = document.createElement(&quot;form&quot;);\n  form.setAttribute(&quot;method&quot;, &quot;post&quot;);\n  form.setAttribute(&quot;action&quot;, action);\n  form.setAttribute(&quot;target&quot;, target);\n\n  Object.keys(params).forEach((key) =&gt; {\n    const input = document.createElement(&quot;input&quot;);\n    input.setAttribute(&quot;type&quot;, &quot;hidden&quot;);\n    input.setAttribute(&quot;name&quot;, key);\n    input.setAttribute(&quot;value&quot;, stringifyValue(params[key]));\n    form.appendChild(input);\n  });\n\n  return form;\n}\n\nexport default function post(details) {\n  const form = buildForm(details);\n  console.log(form);\n  document.body.appendChild(form);\n  form.submit();\n  form.remove();\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EAgain after a successful payment you will be redirected to the page sent from the payment confirmation function i.e. payConf.js.\u003C\u002Fp\u003E\n\u003Cp\u003ETo change your response URLs\ngo to line 89 for payment success URL, line 93 and 96 for Failure URL.\u003C\u002Fp\u003E\n\u003Ch3\u003ENotes\u003C\u002Fh3\u003E\n\u003Cp\u003EThis project is an wrapper and improvement over the project created by \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fimlolman\"\u003ESatyam\u003C\u002Fa\u003E. You can find the github repo  \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fimlolman\u002FPaytm-Payment-Gateway-Integration-using-Google-Cloud-Function\"\u003Ehere\u003C\u002Fa\u003E. He implemented this approach using firebase cloud functions.\u003C\u002Fp\u003E\n\u003Ch4\u003EHow it Works\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fdocs.netlify.com\u002Ffunctions\u002Foverview\u002F\"\u003ENetlify functions\u003C\u002Fa\u003E are AWS lambda functions which return a callback for an API request. I originally intended to implement this approach without \u003Ca href=\"https:\u002F\u002Fexpressjs.com\u002F\"\u003Eexperess.js\u003C\u002Fa\u003E. But I ran into many errors and couldn't figure a way out. So i went with the Express way üòÇ.\u003C\u002Fp\u003E\n\u003Cp\u003EWhen you hit the payment endpoint with the data inside a POST request, it generates a checksum for the provided orderid using paytm's generate checksum logic. After successful generation it responds with the credentials for the payment page. The response from the promise by axios is used to create the HTML form by the elper function post.js and submitted immediately.\u003C\u002Fp\u003E\n\u003Cp\u003EAfter Successful payment, your callback function which is src\u002FpayConf.js verifies the status of the transaction from paytm transaction status api through an unique signature. after successful verification, the callback function creates an order on your firebase database and responds with your payment succes page url.\u003C\u002Fp\u003E\n\u003Ch4\u003EErrors\u003C\u002Fh4\u003E\n\u003Cp\u003EI have handled most of the errors üòå. Still there is always a bug üêõ. If you ran into any issues try using console.log() to find and fix the error by using google. If you don't find any way reach me \u003Ca href=\"mailto:soulsam480@hotmail.com\"\u003Ehere\u003C\u002Fa\u003E. I'll be happy to help üëèüèºüëèüèº !!\u003C\u002Fp\u003E\n\u003Ch4\u003EReferences\u003C\u002Fh4\u003E\n\u003Cp\u003ELinks to some of the resources that helped me create this project.\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fimlolman\u002FPaytm-Payment-Gateway-Integration-using-Google-Cloud-Function\"\u003ESatyam's Repo\u003C\u002Fa\u003E üëèüèº\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fmedium.com\u002Fimlolman\u002Fintegrate-paytm-payment-gateway-for-static-hosted-website-using-google-cloud-function-4c78385cda9f\"\u003EHis post on his approach\u003C\u002Fa\u003E üëåüèº\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fnetlify\u002Fnetlify-lambda\"\u003ENetlify Lambda Repo\u003C\u002Fa\u003E For improvements and bugs. üêõ\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fdougmoscrop\u002Fserverless-http\"\u003EServerless HTTP\u003C\u002Fa\u003E For more bugs üêõüêõ\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fdocs.netlify.com\u002Ffunctions\u002Foverview\u002F\"\u003ENetlify Functions\u003C\u002Fa\u003E For reference üéá\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fdeveloper.paytm.com\u002Fdocs\u002Fv1\u002Fpayment-gateway\u002F\"\u003EPaytm Documentation\u003C\u002Fa\u003E For more reference üéáüéá\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003EI'm not good at writing documentations. So if i missed something and you ran into an unknown issue please reach me on\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ca href=\"mailto:soulsam480@hotmail.com\"\u003Email\u003C\u002Fa\u003E üìß \u002F \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fsambitsahoojs\"\u003Etwitter\u003C\u002Fa\u003E üïä \u002F \u003Ca href=\"https:\u002F\u002Finstagram.com\u002Fsambitsahoo.js\"\u003Einstagram\u003C\u002Fa\u003E üñº\u003C\u002Fp\u003E\n\u003Cp\u003EThank You! ‚úåüèº\u003C\u002Fp\u003E\n"}],fetch:[],mutations:void 0}}("Monday, Aug 17, 2020")));